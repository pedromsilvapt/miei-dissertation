main <- body EOF;

body <- statement ( ";" statement )* _ ";"? _
      / ""
      ;

// Statements
statement <- _ ( var_declaration / voice_declaration / for_loop_statement / while_loop_statement / if_statement / expression ) _;

var_declaration <- "$" namespaced _ "=" _ expression;

voice_declaration <- !"::" ":" identifier _ "=" _ voice_declaration_body;

voice_declaration_body <- integer
                        / "(" _ function_parameters _ ")"
                        / !"::" ":" identifier _ "(" _ function_parameters _ ")"
                        ;

function_declaration <- "fun" _ namespaced? _ "(" _ arguments? _ ")" _ "{" body "}"
                      / "fun" _ namespaced? _ "(" _ arguments? _ ")" _ "=>" _ expression
                      ;

arguments <- single_argument ( _ arguments_separator _ single_argument )*;

arguments_separator <- ',' / ';';

single_argument <- single_argument_expr / single_argument_ref / single_argument_eval;

single_argument_expr <- "expr" _ "$" identifier;

single_argument_ref <- "ref" _ "$" identifier;

single_argument_eval <- "$" identifier _ "=" _ expression
                      / "$" identifier
                      ;

for_loop_statement <- "for" _ "$" namespaced _ "in" _ value_expression _ ".." _ value_expression _ "{" _ body? _ "}";

while_loop_statement <- "while" _ "(" _ expression _ ")" _ "{" _ body _ "}";

if_statement <- "if" _ "(" _ expression _ ")" _ "{" _ body _ "}" _ "else" _ "{" _ body _ "}"
              / "if" _ "(" _ expression _ ")" _ "{" _ body _ "}"
              ;

// BEGIN Keyboard
keyboard_declaration <- "@keyboard" (_ alphanumeric)* ( _ group )? _ "{" ( _ keyboard_shortcut _  ";" )* _ "}";

keyboard_shortcut <- alphanumeric (_"+"_ alphanumeric)* (_ alphanumeric)* _ ":" _ expression
                   / string_value (_ alphanumeric)* _ ":" _ expression
                   / "[" _ list_comprehension _ "]" (alphanumeric _)* _ ":" _ expression
                   / "[" _ value_expression _ "]" (alphanumeric _)* _ ":" _ expression
                   ;

list_comprehension <- expression "for" _ "$" _ namespaced _ "in" _ value_expression _ ".." _ value_expression
                    / expression "for" _ "$" _ namespaced _ "in" _ value_expression _ ".." _ value_expression _ "if" value_expression
                    ;
// END Keyboard


expression <- e music_expression;

music_expression <- sequence ( _ "|" _ sequence )*;

sequence <- value_expression ( _ value_expression)*;

group <- "(" _ expression _ ")";

block <- "{" _ body _ "}";

variable <- "$" namespaced;

function <- namespaced "(" _ function_parameters _ ")";

function_parameters <- named_parameters
                     / positional_parameters ( _ parameters_separator _ named_parameters )?
                     / e
                     ;

positional_parameters <- !named_parameter expression ( _ parameters_separator _ !named_parameter expression )*;

named_parameters <- named_parameter ( _ parameters_separator _ named_parameter )*;

named_parameter <- identifier _ '=' _ expression;

parameters_separator <- ',' / ';';

note <- note_pitch note_value?;

chord <- "[" _ note_pitch chord_suffix _ "]" note_value?
       / "[" ( _ note_pitch )+ _ "]" note_value?
       ;

chord_suffix <- 'm7' / 'M7' / 'dom7' / '7' / 'm7b5' / 'dim7' / 'mM7'
              / '5'
              / 'M' / 'm' / 'aug' / 'dim' / '+'
              ;

rest <- "r" note_value?;

note_value
    <- "/" _ integer
     / integer _ "/" _ integer
     / integer
     ;

note_pitch <- note_accidental _ note_pitch_raw;

note_accidental <- "^" / "^^" / "__" / "_" / "";

note_pitch_raw <- r"[cdefgab]" "'"*
                / r"[CDEFGAB]" ","*
                ;

modifier
    <- r"[tT]" _ integer
     / r"[vV]" _ integer
     / r"[lL]" _ note_value
     / r"[sS]" _ integer _ "/" _ integer
     / r"[sS]" _ integer
     / r"[oO]" _ integer
     ;

instrument_modifier <- !"::" ":" ( identifier / "?" ) _ sequence;

value_expression <- e binary_logic_operator_expression;

binary_logic_operator_expression <- binary_comparison_operator_expression _ ("and" / "or") _ binary_logic_operator_expression
                                  / binary_comparison_operator_expression
                                  ;

binary_comparison_operator_expression <- binary_sum_operator_expression _ (">=" / ">" / "==" / "!=" / "<=" / "<") _ binary_comparison_operator_expression
                                       / binary_sum_operator_expression
                                       ;

binary_sum_operator_expression <- binary_mult_operator_expression _ r"[+\-]" _ binary_sum_operator_expression
                                / binary_mult_operator_expression
                                ;

binary_mult_operator_expression <- unary_operator_expression _ r"[*/]" _ binary_mult_operator_expression
                                 / unary_operator_expression
                                 ;                            

unary_operator_expression <- ( "not" / ""  ) _  expression_single;

expression_single <- expression_single_prefix ( ( _ property_accessor ) / property_call )*;

expression_single_prefix  <- function_declaration / string_value / number_value / bool_value / none_value / variable / function / keyboard_declaration / group / block / chord / note / rest / modifier / instrument_modifier;

property_accessor <- "::" _ ( identifier / ( "[" _ expression _ "]" ) );

property_call <- "(" _ function_parameters _ ")";

string_value <- double_string / single_string;

double_string <- "\"" double_string_char* "\"";

double_string_char 
    <- "\\\""
     / "\\\\"
     / r"[^\"]"
     ;

single_string <- "'" single_string_char* "'";

single_string_char
    <- "\\'"
     / "\\\\"
     / r"[^']"
     ;

number_value <- float / integer;

bool_value <- "true" / "false";

none_value <- "none";

float <- r"[0-9]+\.[0-9]+";

integer <- r"[\-\+]?[0-9]+";

namespaced <- ( identifier "\\" )* identifier;

identifier <- r"[a-zA-Z\_][a-zA-Z0-9\_]*";

alphanumeric <- r"[a-zA-Z0-9\_]*";

_ <- r"[ \t\r\n]*";

e <- "";

comment <- _ r"#[^\n]*";
