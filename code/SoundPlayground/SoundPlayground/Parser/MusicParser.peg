@namespace SoundPlayground.Parser
@classname MusicParser
@using SoundPlayground.Parser.AbstractSyntaxTree;
@using SoundPlayground.Parser.AbstractSyntaxTree.ContextModifiers;

body <MusicNode>
    = _ e:expression _ EOF { e }

expression <MusicNode>
    = parallel

parallel <MusicNode>
    = ns:sequence<1,,_ "|" _> { ns.Count == 1 ? ns[ 0 ] : new MusicParallelNode( ns ) }

sequence <MusicNode>
    = ns:repeat<1,,_> { ns.Count == 1 ? ns[ 0 ] : new MusicSequenceNode( ns ) }

repeat <MusicNode>
    = e:expressionUnambiguous _ "*" _ c:integer { new MusicRepeatNode( e, c ) }
    / expressionUnambiguous

expressionUnambiguous <MusicNode>
    = group / chord / note / modifier

group <MusicGroupNode>
    = "(" _ e:expression _ ")" { new MusicGroupNode( e ) }

note <NoteNode>
    = n:notePitch _ octave:integer _ "/" _ duration:integer { new NoteNode() { PitchClass = n, Value = duration, Octave = octave } }
    / n:notePitch _ "/" _ duration:integer                  { new NoteNode() { PitchClass = n, Value = duration } }
    / n:notePitch _ octave:integer                          { new NoteNode() { PitchClass = n, Octave = octave } }
    / n:notePitch                                           { new NoteNode() { PitchClass = n } }

chord <MusicParallelNode>
    = "[" _ ns:note<1,,_>  _ "]" { new MusicParallelNode( ns ) }

notePitch <string>
    = [cdefgabCDEFGAB]

modifier <ContextModifierNode>
    = [tT] _ tempo:integer               { new TempoModifierNode( tempo ) }
    / [vV] _ velocity:integer            { new VelocityModifierNode( velocity ) }
    / [lL] _ "/" _ length:integer        { new LengthModifierNode( length ) }
    / [sS] _ u:integer _ "/" _ l:integer { new SignatureModifierNode( u, l ) }
    / [sS] _ l:integer                   { new SignatureModifierNode( null, l ) }
    / [oO] _ octave:integer              { new OctaveModifierNode( octave ) }

integer <int>
    = d:([0-9]+) { int.Parse( string.Join( "", d ) ) }

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
