@namespace SoundPlayground.Parser
@classname MusicParser
@using SoundPlayground.Parser.AbstractSyntaxTree;
@using SoundPlayground.Parser.AbstractSyntaxTree.ContextModifiers;

body <MusicNode>
    = _ e:expression _ EOF { e }

expression <MusicNode>
    = parallel

parallel <MusicNode>
    = ns:sequence<1,,_ "|" _> { ns.Count == 1 ? ns[ 0 ] : new MusicParallelNode( ns ) }

sequence <MusicNode>
    = ns:repeat<1,,_> { ns.Count == 1 ? ns[ 0 ] : new MusicSequenceNode( ns ) }

repeat <MusicNode>
    = e:expressionUnambiguous _ "*" _ c:integer { new MusicRepeatNode( e, c ) }
    / expressionUnambiguous

expressionUnambiguous <MusicNode>
    = group / chord / note / rest / modifier

group <MusicGroupNode>
    = "(" _ e:expression _ ")" { new MusicGroupNode( e ) }

note <NoteNode>
    = n:notePitch _ value:noteValue  { new NoteNode() { PitchClass = n.Item1, Octave = n.Item2, Value = value } }
    / n:notePitch                    { new NoteNode() { PitchClass = n.Item1, Octave = n.Item2 } }

chord <MusicParallelNode>
    = "[" _ ns:note<1,,_>  _ "]" { new MusicParallelNode( ns ) }

rest <RestNode>
    = "r" _ value:noteValue  { new RestNode() { Value = value } }
    / "r"                    { new RestNode() }

noteValue <float>
    = "/" _ num:integer              { 1 / (float)num }
    / den:integer "/" _ num:integer  { (float)den / (float)num }
    / den:integer                    { (float)den }

notePitch <(string,int)>
    = c:[cdefgab] o:"'"*    { ( c, o.Count ) }
    / c:[CDEFGAB] o:","*    { ( c, -1 - o.Count ) }

modifier <ContextModifierNode>
    = [tT] _ tempo:integer               { new TempoModifierNode( tempo ) }
    / [vV] _ velocity:integer            { new VelocityModifierNode( velocity ) }
    / [lL] _ value:noteValue             { new LengthModifierNode( value ) }
    / [sS] _ u:integer _ "/" _ l:integer { new SignatureModifierNode( u, l ) }
    / [sS] _ l:integer                   { new SignatureModifierNode( null, l ) }
    / [oO] _ octave:integer              { new OctaveModifierNode( octave ) }

integer <int>
    = d:([0-9]+) { int.Parse( string.Join( "", d ) ) }

_ = [ \t\r\n]*

EOF
  = !.
  / unexpected:. #error{ "Unexpected character '" + unexpected + "'." }
